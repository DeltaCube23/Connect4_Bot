{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Col","i","this","colValues","colOnClick","renderSquare","React","Component","Board","state","boardValue","Array","fill","map","row","redIsNext","winner","board","c","tempBoard","curPlayer","depth","alpha","beta","track","score","filled","gameOver","total","r","calc","get_state","opponent","best","pos","miniMax","val","slice","j","findResult","curWinner","setState","col","AIplay","handleClick","status","renderCol","handleReset","a","b","d","y","check","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba36c8cf.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n      <button className=\"square\" onClick={() => props.onClick()}>\n        <div className={props.value === 'Red' ? \"circle red-player\" : props.value === 'Yellow' ? \"circle yellow-player\" : \"circle\"}></div>\n      </button>\n    );\n}\n\nclass Col extends React.Component {\n\n    renderSquare(i) {\n      return (\n        <Square\n          value={this.props.colValues[i]}\n          onClick={() => this.props.colOnClick()}\n        />\n      );\n    }\n  \n    render() {\n      return (\n        <div className=\"board-col\">\n          {this.renderSquare(5)}\n          {this.renderSquare(4)}\n          {this.renderSquare(3)}\n          {this.renderSquare(2)}\n          {this.renderSquare(1)}\n          {this.renderSquare(0)}\n        </div>\n      );\n    }\n  }\n\nclass Board extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            boardValue: new Array(7).fill(null).map(row => new Array(6).fill(null)),\n            redIsNext: true,\n            winner: null\n        }\n    }\n\n    filled(board) {\n        for(let c = 0; c < 7; c++) {\n            if(board[c][5] === null) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    miniMax(tempBoard, curPlayer, depth, alpha, beta, track) {\n        let score;\n        if(depth === 0 || this.filled(tempBoard) || gameOver(tempBoard)) {\n            score = get_state(tempBoard);\n            return score;\n        }\n\n        const opponent = (curPlayer === 'Red')? 'Yellow' : 'Red';\n        var best = (curPlayer === 'Red')? 50000 : -50000;\n        var pos = 3;\n\n        for(let c = 0; c < 7; c++) {\n            if(track[c] < 6) {\n                //Maximizer\n                if(curPlayer === 'Yellow') { \n                    tempBoard[c][track[c]] = curPlayer;\n                    track[c] += 1;\n                    score = this.miniMax(tempBoard, opponent, depth-1, alpha, beta, track);\n                    //score = score*depth;\n\n                    if(score > best) {\n                        best = score;\n                        pos = c;\n                        // update alpha\n                        if(best > alpha) {\n                            alpha = best;\n                        }\n\n                        if(beta <= alpha) {\n                            track[c] -= 1;\n                            tempBoard[c][track[c]] = null;\n                            break;\n                        }\n                    }\n                    track[c] -= 1;\n                    tempBoard[c][track[c]] = null;\n                }\n                else { //Minimizer\n                    tempBoard[c][track[c]] = curPlayer;\n                    track[c] += 1;\n                    score = this.miniMax(tempBoard, opponent, depth-1, alpha, beta, track);\n                    //score = score*depth;\n\n                    if(score < best) {\n                        best = score;\n                        pos = c;\n                        // update beta\n                        if(best < beta) {\n                            beta = best;\n                        }\n\n                        if(beta <= alpha) {\n                            track[c] -= 1;\n                            tempBoard[c][track[c]] = null;\n                            break;\n                        }\n                    }\n                    track[c] -= 1;\n                    tempBoard[c][track[c]] = null;\n                }\n\n            }\n        } //loop ends\n\n        if(depth === 8) {\n            return pos;\n        }\n        else {\n            return best;\n        }\n    }\n\n    AIplay() {\n        if(this.state.winner != null || this.filled(this.state.boardValue))\n            return;\n        \n        const val = this.state.boardValue.slice();\n        const curPlayer = this.state.redIsNext? 'Red' : 'Yellow';\n        \n        var depth = 8;\n        var track = new Array(7).fill(7);\n\n        //Track first empty position of each column\n        for(let i = 0; i < 7; i++) {\n            for(let j = 0; j < 6; j++) {\n                if(val[i][j] === null) {\n                    track[i] = j;\n                    break;\n                }\n            }\n        }\n\n        var pos = this.miniMax(val, curPlayer, depth, -50000, 50000, track);\n\n        let findResult;\n        for(let j = 0; j < 6; j++) {\n            if(val[pos][j] === null) {\n                val[pos][j] = curPlayer;\n                findResult = gameOver(val);\n                break;\n            }\n        }\n\n        var curWinner = findResult? curPlayer : null;\n        this.setState({\n            boardValue: val,\n            redIsNext: !this.state.redIsNext,\n            winner: curWinner\n        });\n    }\n    \n    handleClick(col) {\n        if(this.state.winner != null || this.filled(this.state.boardValue))\n            return;\n\n        const val = this.state.boardValue.slice();\n        const curPlayer = this.state.redIsNext? 'Red' : 'Yellow';\n        let findResult;\n\n        for(let i = 0; i < 6; i++) {\n            if(val[col][i] === null) {\n                val[col][i] = curPlayer;\n                findResult = gameOver(val);\n                break; \n            }\n\n            // reached topmost square\n            if(i === 5) {\n                return;\n            }\n        }\n\n        var curWinner = findResult? curPlayer : null;\n        this.setState({\n            boardValue: val,\n            redIsNext: !this.state.redIsNext,\n            winner: curWinner,},() => {\n            this.AIplay();\n        });\n    }\n\n    renderCol(i) {\n        return (\n        <Col\n            colValues={this.state.boardValue[i]}\n            colOnClick={() => this.handleClick(i)}\n        />\n        );\n    }\n\n    handleReset()\n    {   const val = this.state.boardValue.slice();\n        for(let c = 0;c<7;c++)\n        {\n            for(let r = 0;r<6;r++)\n            {\n                val[c][r] = null;\n            }\n        }\n        this.setState({boardValue: val,\n            redIsNext : true,\n            winner : null });\n    }\n\n    render() {\n        var status;\n        if(this.state.winner) {\n            status = \"Winner: \" + (this.state.winner);\n        }\n        else if(this.filled(this.state.boardValue)) {\n            status = 'Game Drawn';\n        }\n        else {\n            status = 'Next Player: ' + (this.state.redIsNext? 'Red' : 'Yellow');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"status\">{status}</div>\n                <div className=\"game-board\">\n                {this.renderCol(0)}\n                {this.renderCol(1)}\n                {this.renderCol(2)}\n                {this.renderCol(3)}\n                {this.renderCol(4)}\n                {this.renderCol(5)}\n                {this.renderCol(6)}\n                </div>\n                <div className=\"last\">\n                <button className=\"restart\" onClick = {() => this.handleReset()}>\n                    {'RESTART'}\n                </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction calc(a, b, c, d) {\n    let y = 0;\n    let r = 0;\n\n    if(a === 'Yellow') {\n        y++;\n    }\n    if(b === 'Yellow') {\n        y++;\n    }\n    if(c === 'Yellow') {\n        y++;\n    }\n    if(d === 'Yellow') {\n        y++;\n    }\n\n    if(a === 'Red') {\n        r++;\n    }\n    if(b === 'Red') {\n        r++;\n    }\n    if(c === 'Red') {\n        r++;\n    }\n    if(d === 'Red') {\n        r++;\n    }\n\n    if(y === 4 && r === 0) {\n        return 5000;\n    } \n    else if(y === 3 && r === 0) {\n        return 50;\n    } \n    else if(y === 2 && r === 0) {\n        return 5;\n    }\n    else if(y === 0 && r === 4) {\n        return -5000;\n    }\n    else if(y === 0 && r === 3) {\n        return -50;\n    }\n    else if(y === 0 && r === 2) {\n        return -5;\n    }\n    else {\n        return 0;\n    }\n}\n\nfunction get_state(tempBoard) {\n    var total = 0;\n    //VERTICAL\n    for (let c = 0; c < 7; c++)\n        for (let r = 0; r < 3; r++)\n            total += calc(tempBoard[c][r], tempBoard[c][r+1], tempBoard[c][r+2], tempBoard[c][r+3]);\n\n    //HORIZONTAL\n    for (let r = 0; r < 6; r++)\n        for (let c = 0; c < 4; c++)\n            total += calc(tempBoard[c][r], tempBoard[c+1][r], tempBoard[c+2][r], tempBoard[c+3][r]);\n\n    //DIAGONAL\n    for (let r = 0; r < 3; r++)\n        for (let c = 0; c < 4; c++)\n            total += calc(tempBoard[c][r], tempBoard[c+1][r+1], tempBoard[c+2][r+2], tempBoard[c+3][r+3]);\n\n    //ANTIDIAGONAL\n    for (let r = 0; r < 3; r++)\n        for (let c = 3; c < 7; c++)\n            total += calc(tempBoard[c][r], tempBoard[c-1][r+1], tempBoard[c-2][r+2], tempBoard[c-3][r+3]);\n\n    return total;\n}\n\nfunction check(a, b, c, d) {\n    if((a != null) && (a === b) && (b ===c) && (c === d))\n        return true;\n    return false;\n}\n\nfunction gameOver(board) {\n    //VERTICAL\n    for (let c = 0; c < 7; c++)\n        for (let r = 0; r < 3; r++)\n            if (check(board[c][r], board[c][r+1], board[c][r+2], board[c][r+3]))\n                return true;\n    \n    //HORIZONTAL\n    for (let r = 0; r < 6; r++)\n        for (let c = 0; c < 4; c++)\n            if (check(board[c][r], board[c+1][r], board[c+2][r], board[c+3][r]))\n                return true;\n\n    //DIAGONAL\n    for (let r = 0; r < 3; r++)\n        for (let c = 0; c < 4; c++)\n            if (check(board[c][r], board[c+1][r+1], board[c+2][r+2], board[c+3][r+3]))\n                return true;\n\n    //ANTIDIAGONAL\n    for (let r = 0; r < 3; r++)\n        for (let c = 3; c < 7; c++)\n            if (check(board[c][r], board[c-1][r+1], board[c-2][r+2], board[c-3][r+3]))\n                return true;\n\n    return null;\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>Connect4</h1>\n                <Board />\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);"],"sourceRoot":""}